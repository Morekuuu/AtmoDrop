import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib


df = pd.read_excel("dane.xlsx")
df.columns = df.columns.str.strip()


df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df['month'] = df['Date'].dt.month
df['day'] = df['Date'].dt.day

df['h_time'] = pd.to_datetime(df['h'], format='%H:%M:%S', errors='coerce')
df['hour'] = df['h_time'].dt.hour
df['minute'] = df['h_time'].dt.minute


for col in ['tp3', 'tp6', 'tp9', 'tp12', 'ir3', 'ir6', 'ir9', 'ir12']:
    df[col] = pd.to_numeric(df[col], errors='coerce')


targets = ['ir3', 'ir6', 'ir9', 'ir12']
features_map = {
    'ir3': ['tp3', 'hour', 'minute', 'month', 'day'],
    'ir6': ['tp6', 'hour', 'minute', 'month', 'day'],
    'ir9': ['tp9', 'hour', 'minute', 'month', 'day'],
    'ir12': ['tp12', 'hour', 'minute', 'month', 'day'],
}


models = {}
for target in targets:
    print(f"\n Trenowanie modelu dla: {target}")
    required_columns = features_map[target] + [target]
    subset = df[required_columns].dropna()

    if subset.empty:
        print(f" Pomijanie modelu {target} – brak danych.")
        continue

    X = subset[features_map[target]]
    y = subset[target]

    if y.nunique() < 2:
        print(f" Pomijanie modelu {target} – target ma tylko jedną wartość.")
        continue

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    model = xgb.XGBRegressor(
        n_estimators=500,
        learning_rate=0.03,
        max_depth=6,
        subsample=0.8,
        colsample_bytree=0.8,
        reg_alpha=0.1,
        reg_lambda=1.0,
        random_state=42,
        verbosity=0
    )
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)


    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    print(f" MAE:  {mae:.3f}")
    print(f" RMSE: {rmse:.3f}")
    print(f" R²:   {r2:.3f}")

    model_path = f"model_{target}.pkl"
    joblib.dump(model, model_path)
    print(f" Model zapisany do: {model_path}")

print("\n Wszystkie modele zostały wytrenowane i zapisane.")
